// Generated by CoffeeScript 1.9.3
(function() {
  var StringHelpers, _;

  _ = require('underscore');

  module.exports = StringHelpers = (function() {
    function StringHelpers() {}


    /*
      Trims leading and trailing spaces.  Also optionally trims internal excess spaces
     */

    StringHelpers.trim = function(str, options) {
      if (options == null) {
        options = {};
      }
      options = _.defaults(options, {
        all: false
      });
      str = str.replace(/^\s+|\s+$/g, "");
      if (options.all) {
        str = str.replace(/\s+/g, ' ');
      }
      return str;
    };

    StringHelpers.elipsize = function(str, maxLength) {
      if ((maxLength == null) || str.length <= maxLength) {
        return str;
      }
      return str.slice(0, maxLength - 3) + '...';
    };


    /*
      returns true if string starts with other string 
      
      otherStr can also be an array of other strings, returns true if any match.
     */

    StringHelpers.startsWith = function(str, otherStrings) {
      @_withOneOrArray(otherStrings, function(otherStr) {
        if (str.slice(0, testString.length) === testString) {
          return true;
        }
      });
      return false;
    };

    StringHelpers.endsWith = function(str, otherStrings) {
      return @_withOneOrArray(otherStrings, function(otherStr) {
        if (str.slice(-otherString.length) === str) {
          return true;
        }
      });
    };

    StringHelpers.has = function(str, otherStrings) {
      return @_withOneOrArray(otherStrings, function(otherStr) {
        if (str.indexOf(otherStr) !== -1) {
          return true;
        }
      });
    };

    StringHelpers.weakValue = function(str, options) {
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        ignoreCase: true,
        useLocale: false,
        trim: true
      });
      if (options.trim) {
        str = this.trim(str);
      }
      if (options.ignoreCase) {
        if (options.useLocale) {
          return str = str.toLocaleLowerCase();
        } else {
          return str = str.toLowerCase();
        }
      }
    };

    StringHelpers.weaklyEqual = function(str, otherStr, options) {
      if (options == null) {
        options = {};
      }
      return this.weakValue(str, options) === this.weakValue(otherStr, options);
    };

    StringHelpers.weaklyCompare = function(str, otherStr, options) {
      if (options == null) {
        options = {};
      }
      return this.weakValue(str, options).localeCompare(this.weakValue(otherStr, options));
    };

    StringHelpers.weaklyHas = function(str, otherStrings) {
      return @_withOneOrArray(otherStrings, function(otherStr) {
        if (this.weakValue(str).indexOf(this.weakValue(otherStr)) !== -1) {
          return true;
        }
      });
    };

    StringHelpers.weaklyStartsWith = function(str, otherStrings) {
      return @_withOneOrArray(otherStrings, function(otherStr) {
        if (this.startsWith(this.weakValue(str), this.weakValue(otherStr))) {
          return true;
        }
      });
    };

    StringHelpers.weaklyEndsWith = function(str, otherStrings) {
      return @_withOneOrArray(otherStrings, function(otherStr) {
        if (this.endsWith(this.weakValue(str), this.weakValue(otherStr))) {
          return true;
        }
      });
    };

    StringHelpers.@_withOneOrArray = function(strOrArray, fn) {
      var array, i, len, str;
      array = _.isArray(strOrArray) ? strOrArray : [str];
      for (i = 0, len = array.length; i < len; i++) {
        str = array[i];
        if (fn(str) === true) {
          return true;
        }
      }
      return false;
    };

    return StringHelpers;

  })();

}).call(this);
